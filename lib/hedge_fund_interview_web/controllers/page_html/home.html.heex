<!DOCTYPE html>
<style>
  .wave-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: #000;
    overflow: hidden;
    z-index: -1;
  }

  .wave {
    position: absolute;
    width: 1500px;
    height: 1300px;
    opacity: 0.2;
    border-radius: 43%;
    transform-origin: 50% 48%;
    animation: drift linear infinite;
  }

  .wave:nth-child(1) {
    background: rgba(65, 105, 225, 0.3); /* Royal Blue */
    animation-duration: 25s;
    left: 30%;
    top: -100px;
  }

  .wave:nth-child(2) {
    background: rgba(0, 0, 128, 0.25); /* Navy */
    animation-duration: 30s;
    left: -10%;
    top: 20%;
    animation-direction: reverse;
  }

  .wave:nth-child(3) {
    background: rgba(25, 25, 112, 0.3); /* Midnight Blue */
    animation-duration: 27s;
    left: 50%;
    top: 50%;
  }

  .wave:nth-child(4) {
    background: rgba(39, 64, 139, 0.25); /* Royal Blue Dark */
    animation-duration: 35s;
    left: 20%;
    top: 60%;
    animation-direction: reverse;
  }

  .wave:nth-child(5) {
    background: rgba(72, 61, 139, 0.3); /* Dark Slate Blue - slight purple tint */
    animation-duration: 40s;
    left: 60%;
    top: 30%;
  }

  @keyframes drift {
    from {
      transform: rotate(0deg) scale(1) translateX(10px);
    }
    50% {
      transform: rotate(180deg) scale(1.1) translateX(30px);
    }
    to {
      transform: rotate(360deg) scale(1) translateX(10px);
    }
  }

  .content {
    position: relative;
    z-index: 1;
    color: white;
    text-align: center;
    padding-top: 20vh;
    font-family: system-ui, -apple-system, sans-serif;
  }

  .title {
    font-size: 3.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: #152a6c;
    background: linear-gradient(45deg, #2d56c4, #152a6c); /* Medium Royal Blue to Medium Navy */
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 0 0 20px rgba(45, 86, 196, 0.2);
    animation: glow 4s ease-in-out infinite alternate;
  }

  @keyframes glow {
    from {
      text-shadow: 0 0 20px rgba(45, 86, 196, 0.1);
    }
    to {
      text-shadow: 0 0 30px rgba(45, 86, 196, 0.3);
    }
  }

  .subtitle {
    font-size: 1.5rem;
    font-weight: 300;
    color: #B8B8B8;
    max-width: 600px;
    margin: 0 auto;
    line-height: 1.6;
  }

  .prompt-container {
    margin-top: 2rem;
    padding: 1.5rem;
    background: rgba(25, 25, 112, 0.15);
    border-radius: 12px;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.2);
  }

  .prompt-textarea {
    width: 100%;
    min-height: 300px;
    padding: 1.5rem;
    background: #1a1a1d;
    border: none;
    border-radius: 8px;
    color: #c0c0c0;
    font-family: 'JetBrains Mono', 'Fira Code', 'SF Mono', 'Consolas', monospace;
    font-size: 0.85rem;
    line-height: 1.6;
    resize: vertical;
    outline: none;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
    text-align: left;
    white-space: pre-wrap;
  }

  .prompt-textarea:focus {
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .prompt-description {
    color: #B8B8B8;
    font-size: 0.9rem;
    margin-bottom: 1.2rem;
    text-align: left;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  }

  .code-text {
    font-family: 'JetBrains Mono', 'Fira Code', 'SF Mono', 'Consolas', monospace;
    background: rgba(255, 255, 255, 0.1);
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    color: #d4d4d4;
    font-size: 0.85rem;
  }

  .button-container {
    margin-top: 2.5rem;
    margin-bottom: 3rem;
  }

  .begin-button {
    background: linear-gradient(135deg, #2d56c4 0%, #152a6c 100%);
    color: white;
    font-family: system-ui, -apple-system, sans-serif;
    font-size: 1.1rem;
    font-weight: 500;
    padding: 0.8rem 2rem;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(45, 86, 196, 0.2);
    position: relative;
    overflow: hidden;
  }

  .begin-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(45, 86, 196, 0.3);
    background: linear-gradient(135deg, #3461d1 0%, #1e3a8a 100%);
  }

  .begin-button:active {
    transform: translateY(0);
    box-shadow: 0 2px 8px rgba(45, 86, 196, 0.2);
  }

  .begin-button::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transform: translateX(-100%);
  }

  .begin-button:hover::after {
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    100% {
      transform: translateX(100%);
    }
  }

  .loading {
    opacity: 0.7;
    cursor: wait;
    pointer-events: none;
  }

  .loading::before {
    content: '';
    display: inline-block;
    width: 1em;
    height: 1em;
    margin-right: 0.5em;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 0.8s linear infinite;
    vertical-align: middle;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .toast {
    position: fixed;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%) translateY(150%);
    background: rgba(220, 53, 69, 0.95);
    color: white;
    padding: 0.8rem 1.5rem;
    border-radius: 6px;
    font-family: system-ui, -apple-system, sans-serif;
    font-size: 0.95rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    z-index: 1000;
    opacity: 0;
    transition: all 0.3s ease;
  }

  .toast.show {
    transform: translateX(-50%) translateY(0);
    opacity: 1;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const button = document.querySelector('.begin-button');
    let toastTimeout;

    function showToast(message) {
      // Remove existing toast if any
      const existingToast = document.querySelector('.toast');
      if (existingToast) {
        existingToast.remove();
      }

      // Create and show new toast
      const toast = document.createElement('div');
      toast.className = 'toast';
      toast.textContent = message;
      document.body.appendChild(toast);

      // Trigger reflow for animation
      toast.offsetHeight;
      toast.classList.add('show');

      // Clear existing timeout if any
      if (toastTimeout) {
        clearTimeout(toastTimeout);
      }

      // Hide toast after 3 seconds
      toastTimeout = setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }
    
    button.addEventListener('click', async function() {
      try {
        // Disable button and show loading state
        button.classList.add('loading');
        button.textContent = 'Starting Interview...';
        
        const response = await fetch('/api/begin_interview', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          }
        });

        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

        const data = await response.json();
        if (data.status === 'success') {
          button.textContent = 'Interview Started!';
        } else {
          throw new Error('Unexpected response');
        }
      } catch (error) {
        console.error('Error:', error);
        showToast('Error: make sure your config is correct');
      } finally {
        button.classList.remove('loading');
        // Reset button text after delay only if it was successful
        if (button.textContent === 'Interview Started!') {
          setTimeout(() => {
            button.textContent = 'Begin Interview';
          }, 2000);
        } else {
          button.textContent = 'Begin Interview';
        }
      }
    });
  });
</script>

<div class="wave-container">
  <div class="wave"></div>
  <div class="wave"></div>
  <div class="wave"></div>
  <div class="wave"></div>
  <div class="wave"></div>
</div>

<div class="content">
  <h1 class="title">Interview Agent</h1>
  <p class="subtitle">Get ready to submit an interview to Spectra's Hedge Fund.</p>
  <div class="prompt-container">
    <p class="prompt-description">
      This is the prompt your agent will use to answer the interview questions. If you want to modify it, please change it in the <span class="code-text">prompt.txt</span> file.
    </p>
    <textarea id="prompt" class="prompt-textarea" readonly><%= @prompt %></textarea>
  </div>
  <div class="button-container">
    <button class="begin-button">Begin Interview</button>
  </div>
</div>
